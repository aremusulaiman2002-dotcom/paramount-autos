generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id          String   @id @default(uuid())
  name        String
  type        String
  pricePerDay Int
  availability Boolean @default(true)
  image       String?
  description String
  features    String   // Store as JSON string instead of String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vehicles")
}

model Booking {
  id              String   @id @default(uuid())
  refNumber       String   @unique
  customerName    String
  phone           String
  email           String?
  pickupLocation  String
  dropoffLocation String
  startDate       DateTime
  endDate         DateTime
  vehicles        String   // Store as JSON string
  securityPersonnel String? // Store as JSON string
  totalAmount     Int
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("bookings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  VERIFIED
  FAILED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}